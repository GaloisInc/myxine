cabal-version:       2.4
name:                myxine-client
version:             0.0.0.1
synopsis:            A Haskell client for the Myxine GUI server
homepage:            https://github.com/GaloisInc/myxine
bug-reports:         https://github.com/GaloisInc/myxine/issues
license:             MIT
license-file:        LICENSE
author:              Kenny Foner
maintainer:          kwf@galois.com
copyright:           Copyright (c) 2020 Galois, Inc.
category:            GUI
stability:           alpha
extra-source-files:  CHANGELOG.md, enabled-events.json
description:
  [Myxine](https://github.com/GaloisInc/myxine) is a language-agnostic local
  server that lets you build interactive applications in the browser using a
  RESTful API. This package defines high-level typed Haskell bindings for using
  Myxine to quickly prototype surprisingly high-performance GUIs.
  .
  Myxine itself runs as a local server, separately from these bindings. It is
  built in [Rust](https://www.rust-lang.org/learn/get-started), and can be
  installed using the standard Rust build tool @cargo@:
  .
  > $ cargo install myxine
  .
  This Haskell package does __not__ manage the @myxine@ server process; it
  assumes that it is already running in the background (either started by an
  end-user, or managed by your own Haskell application).
  .
  __Required extensions:__ This library relies on the @OverloadedRecordFields@
  language extension, since a variety of browser event interfaces share field
  names/types. Without enabling it, you'll see many bewildering errors about
  ambiguous names. You may also find useful for concision the extensions
  @NamedFieldPuns@ and @RecordWildCards@.
  .
  __Package versioning and stability:__ This package should be considered in
  "alpha" stability at present. No compatibility between alpha versions is
  guaranteed.

common options
  default-language:    Haskell2010
  ghc-options:         -Wall
                       -Wincomplete-uni-patterns
                       -Wincomplete-record-updates
                       -Wcompat
                       -Widentities
                       -Wredundant-constraints
                       -fhide-source-paths
                       -Wpartial-fields

common deps
  build-depends:       base ^>=4.13.0.0,
                       req,
                       aeson,
                       text,
                       transformers,
                       bytestring,
                       unordered-containers,
                       dependent-map,
                       dependent-sum,
                       template-haskell,
                       hashable,
                       file-embed,
                       http-client,
                       http-types

library
  import:              deps, options
  exposed-modules:     Myxine
                       Myxine.Direct
  other-modules:       Myxine.Page
                       Myxine.Target
                       Myxine.Handlers
                       Myxine.Event
                       Myxine.Internal.EventStream
                       Myxine.Internal.TH
                       Paths_myxine_client
  default-extensions:
  hs-source-dirs:      src

executable circles
  import:              options
  build-depends:       base ^>=4.13.0.0,
                       myxine-client,
                       text,
                       bytestring,
                       blaze-html,
                       blaze-markup,
                       random
  main-is:             Main.hs
  hs-source-dirs:      examples/circles

test-suite myxine-client-test
  import:              options
  type:                exitcode-stdio-1.0
  hs-source-dirs:      test
  main-is:             Test.hs
  build-depends:       base ^>=4.13.0.0,
                       myxine-client,
                       text,
                       bytestring
